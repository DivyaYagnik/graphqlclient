{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Divya\\\\Desktop\\\\graphql\\\\client\\\\src\\\\components\\\\BookDetails.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from '@apollo/client';\nimport { useState } from 'react';\nimport { getBookQuery } from '../queries/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookDetails = _ref => {\n  _s();\n\n  let {\n    bookId\n  } = _ref;\n  console.log(bookId);\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(getBookQuery, {\n    variables: {\n      id: {\n        bookId\n      }\n    }\n  });\n  let display;\n\n  if (loading) {\n    display = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (error) {\n    display = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (data) {\n    console.log(\"Data: \", data);\n    const {\n      book\n    } = data;\n    display = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: book.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.genre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.author.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"All Books by Author\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"other-books\",\n        children: book.author.books.map(book => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: book.name\n          }, book.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"book-details\",\n    children: display\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookDetails, \"MadqETWYtkFh3dDWW9IjxDLlwQw=\", false, function () {\n  return [useQuery];\n});\n\n_c = BookDetails;\nexport default BookDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookDetails\");","map":{"version":3,"sources":["C:/Users/Divya/Desktop/graphql/client/src/components/BookDetails.js"],"names":["useQuery","useState","getBookQuery","BookDetails","bookId","console","log","error","loading","data","variables","id","display","book","name","genre","author","books","map"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;;;AAEA,MAAMC,WAAW,GAAG,QAAc;AAAA;;AAAA,MAAb;AAACC,IAAAA;AAAD,GAAa;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAM;AAAEG,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACE,YAAD,EAAe;AAACQ,IAAAA,SAAS,EAAE;AAACC,MAAAA,EAAE,EAAE;AAACP,QAAAA;AAAD;AAAL;AAAZ,GAAf,CAAzC;AACA,MAAIQ,OAAJ;;AACA,MAAIJ,OAAJ,EAAa;AACTI,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACH;;AACD,MAAIL,KAAJ,EAAW;AACPK,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACH;;AACD,MAAGH,IAAH,EAAS;AACLJ,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBG,IAAtB;AACA,UAAM;AAACI,MAAAA;AAAD,QAASJ,IAAf;AACAG,IAAAA,OAAO,gBACH;AAAA,8BACI;AAAA,kBAAKC,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAID,IAAI,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAIF,IAAI,CAACG,MAAL,CAAYF;AAAhB;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,kBACKD,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAuBL,IAAD,IAAU;AAC7B,8BAAO;AAAA,sBAAqBA,IAAI,CAACC;AAA1B,aAAWD,IAAI,CAACF,EAAhB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAFA;AADL;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAED,sBACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA,cACKC;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAjCD;;GAAMT,W;UAE+BH,Q;;;KAF/BG,W;AAmCN,eAAeA,WAAf","sourcesContent":["import { useQuery } from '@apollo/client';\r\nimport { useState } from 'react';\r\nimport { getBookQuery } from '../queries/queries';\r\n\r\nconst BookDetails = ({bookId}) => {\r\n    console.log(bookId);\r\n    const { error, loading, data } = useQuery(getBookQuery, {variables: {id: {bookId}}});\r\n    let display;\r\n    if (loading) {\r\n        display = <div>Loading...</div>\r\n    }\r\n    if (error) {\r\n        display = <div>Error</div>\r\n    }\r\n    if(data) {\r\n        console.log(\"Data: \", data);\r\n        const {book} = data;\r\n        display = (\r\n            <div>\r\n                <h2>{book.name}</h2>\r\n                <p>{book.genre}</p>\r\n                <p>{book.author.name}</p>\r\n                <p>All Books by Author</p>\r\n                <ul className='other-books'>\r\n                    {book.author.books.map((book) => {\r\n                        return <li key = {book.id}>{book.name}</li>\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id='book-details'>\r\n            {display}\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default BookDetails"]},"metadata":{},"sourceType":"module"}