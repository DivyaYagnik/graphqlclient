{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Divya\\\\Desktop\\\\graphql\\\\client\\\\src\\\\components\\\\BookDetails.js\",\n    _s = $RefreshSig$();\n\n// import { useQuery } from '@apollo/client';\n// import { useState } from 'react';\n// import { getBookQuery } from '../queries/queries';\n// const BookDetails = ({bookId}) => {\n//     console.log(bookId);\n//     const { error, loading, data } = useQuery(getBookQuery, {variables: {id: bookId}});\n//     let display;\n//     if (loading) {\n//         display = <div>Loading...</div>\n//     }\n//     if (error) {\n//         display = <div>Error</div>\n//     }\n//     if(data) {\n//         console.log(\"Data: \", data);\n//         const {book} = data;\n//         display = (\n//             <div>\n//                 <h2>{book.name}</h2>\n//                 <p>{book.genre}</p>\n//                 <p>{book.author.name}</p>\n//                 <p>All Books by Author</p>\n//                 <ul className='other-books'>\n//                     {book.author.books.map((book) => {\n//                         return <li key = {book.id}>{book.name}</li>\n//                     })}\n//                 </ul>\n//             </div>\n//         )\n//     }\n//     return (\n//         <div id='book-details'>\n//             {display}\n//         </div>\n//     );\n// }\n// export default BookDetails\nimport React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { getBookQuery } from '../queries/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookDetails = _ref => {\n  _s();\n\n  let {\n    bookId\n  } = _ref;\n  const {\n    loading,\n    data\n  } = useQuery(getBookQuery, {\n    variables: {\n      id: bookId\n    }\n  });\n  let display;\n\n  if (loading) {\n    display = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  } else {\n    const {\n      book\n    } = data;\n    display = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: book.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.genre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.author.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"All books by this author:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"other-books\",\n        children: book.author.books.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: item.name\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 14\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"book-details\",\n    children: display\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookDetails, \"HasvTXHwlBNedvPpf4Gl00Z2xbw=\", false, function () {\n  return [useQuery];\n});\n\n_c = BookDetails;\nexport default BookDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookDetails\");","map":{"version":3,"sources":["C:/Users/Divya/Desktop/graphql/client/src/components/BookDetails.js"],"names":["React","useQuery","getBookQuery","BookDetails","bookId","loading","data","variables","id","display","book","name","genre","author","books","map","item"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;;;AAEA,MAAMC,WAAW,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;AACnC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBL,QAAQ,CAACC,YAAD,EAAe;AAChDK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEJ;AAAN;AADqC,GAAf,CAAlC;AAGA,MAAIK,OAAJ;;AACA,MAAIJ,OAAJ,EAAa;AACZI,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACA,GAFD,MAEO;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAWJ,IAAjB;AACNG,IAAAA,OAAO,gBACN;AAAA,8BACC;AAAA,kBAAKC,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAA,kBAAID,IAAI,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAA,kBAAIF,IAAI,CAACG,MAAL,CAAYF;AAAhB;AAAA;AAAA;AAAA;AAAA,cAHD,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJD,eAKC;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,kBACED,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAuBC,IAAD,IAAU;AAChC,8BAAO;AAAA,sBAAmBA,IAAI,CAACL;AAAxB,aAASK,IAAI,CAACR,EAAd;AAAA;AAAA;AAAA;AAAA,kBAAP;AACA,SAFA;AADF;AAAA;AAAA;AAAA;AAAA,cALD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAaA;;AAED,sBAAO;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA,cAAwBC;AAAxB;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CAzBD;;GAAMN,W;UACqBF,Q;;;KADrBE,W;AA2BN,eAAeA,WAAf","sourcesContent":["// import { useQuery } from '@apollo/client';\r\n// import { useState } from 'react';\r\n// import { getBookQuery } from '../queries/queries';\r\n\r\n// const BookDetails = ({bookId}) => {\r\n//     console.log(bookId);\r\n//     const { error, loading, data } = useQuery(getBookQuery, {variables: {id: bookId}});\r\n//     let display;\r\n//     if (loading) {\r\n//         display = <div>Loading...</div>\r\n//     }\r\n//     if (error) {\r\n//         display = <div>Error</div>\r\n//     }\r\n//     if(data) {\r\n//         console.log(\"Data: \", data);\r\n//         const {book} = data;\r\n//         display = (\r\n//             <div>\r\n//                 <h2>{book.name}</h2>\r\n//                 <p>{book.genre}</p>\r\n//                 <p>{book.author.name}</p>\r\n//                 <p>All Books by Author</p>\r\n//                 <ul className='other-books'>\r\n//                     {book.author.books.map((book) => {\r\n//                         return <li key = {book.id}>{book.name}</li>\r\n//                     })}\r\n//                 </ul>\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n//     return (\r\n//         <div id='book-details'>\r\n//             {display}\r\n//         </div>\r\n//     );\r\n// }\r\n  \r\n// export default BookDetails\r\n\r\nimport React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { getBookQuery } from '../queries/queries';\r\n\r\nconst BookDetails = ({ bookId }) => {\r\n\tconst { loading, data } = useQuery(getBookQuery, {\r\n\t\tvariables: { id: bookId }\r\n\t});\r\n\tlet display;\r\n\tif (loading) {\r\n\t\tdisplay = <div>loading</div>;\r\n\t} else {\r\n        const { book } = data;\r\n\t\tdisplay = (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{book.name}</h2>\r\n\t\t\t\t<p>{book.genre}</p>\r\n\t\t\t\t<p>{book.author.name}</p>\r\n\t\t\t\t<p>All books by this author:</p>\r\n\t\t\t\t<ul className=\"other-books\">\r\n\t\t\t\t\t{book.author.books.map((item) => {\r\n\t\t\t\t\t\treturn <li key={item.id}>{item.name}</li>;\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn <div id=\"book-details\">{display}</div>;\r\n};\r\n\r\nexport default BookDetails;"]},"metadata":{},"sourceType":"module"}